import torch
import torch.nn as nn
import numpy as np


class GRUCell(nn.Module):
    
    def __init__(self, input_size, hidden_size, bias=True):
        super(GRUCell, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.bias = bias
        
        self.x2h = nn.Linear(input_size, 3 * hidden_size, bias=bias)
        self.h2h = nn.Linear(hidden_size, 3 * hidden_size, bias=bias)
        
        self.reset_parameters()
        
    def reset_parameters(self):
        std = 1.0 / np.sqrt(self.hidden_size)
        for w in self.parameters():
            w.data.uniform_(-std, std)
            
    def forward(self, input, hx=None):
        
        ## Inputs
            # input: (batch, input_size)
            # hx: (batch, hidden_size)
        
        ## Outputs
            # hy: (batch, hidden_size)
            
        if hx is None:
            hx = torch.zeros(input.size(0), self.hidden_size, dtype=input.dtype, device=input.device)
            
        x_t = self.x2h(input)
        h_t = self.h2h(hx)
        
        x_reset, x_upd, x_new = x_t.chunks(3, 1)
        h_reset, h_upd, h_new = h_t.chunks(3, 1)
        
        reset_gate = torch.sigmoid(x_reset + h_reset)
        update_gate = torch.sigmoid(x_upd + h_upd)
        new_gate = torch.tanh(x_new + reset_gate * h_new)
        
        hy = update_gate * hx + (1 - update_gate) * new_gate
        
        return hy